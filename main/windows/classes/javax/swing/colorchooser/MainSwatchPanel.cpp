#include <javax/swing/colorchooser/MainSwatchPanel.h>

#include <java/awt/Color.h>
#include <java/awt/Component.h>
#include <java/awt/Dimension.h>
#include <java/lang/Array.h>
#include <java/lang/Class.h>
#include <java/lang/ClassInfo.h>
#include <java/lang/MethodInfo.h>
#include <java/lang/String.h>
#include <java/lang/reflect/Constructor.h>
#include <java/lang/reflect/Method.h>
#include <java/util/Locale.h>
#include <javax/swing/UIManager.h>
#include <javax/swing/colorchooser/SwatchPanel.h>
#include <jcpp.h>

using $ColorArray = $Array<::java::awt::Color>;
using $Color = ::java::awt::Color;
using $Component = ::java::awt::Component;
using $Dimension = ::java::awt::Dimension;
using $ClassInfo = ::java::lang::ClassInfo;
using $MethodInfo = ::java::lang::MethodInfo;
using $Locale = ::java::util::Locale;
using $UIManager = ::javax::swing::UIManager;
using $SwatchPanel = ::javax::swing::colorchooser::SwatchPanel;

namespace javax {
	namespace swing {
		namespace colorchooser {

$MethodInfo _MainSwatchPanel_MethodInfo_[] = {
	{"<init>", "()V", nullptr, 0, $method(static_cast<void(MainSwatchPanel::*)()>(&MainSwatchPanel::init$))},
	{"initColors", "()V", nullptr, $PROTECTED},
	{"initRawValues", "()[I", nullptr, $PRIVATE, $method(static_cast<$ints*(MainSwatchPanel::*)()>(&MainSwatchPanel::initRawValues))},
	{"initValues", "()V", nullptr, $PROTECTED},
	{}
};

$ClassInfo _MainSwatchPanel_ClassInfo_ = {
	$ACC_SUPER,
	"javax.swing.colorchooser.MainSwatchPanel",
	"javax.swing.colorchooser.SwatchPanel",
	nullptr,
	nullptr,
	_MainSwatchPanel_MethodInfo_
};

$Object* allocate$MainSwatchPanel($Class* clazz) {
	return $of($alloc(MainSwatchPanel));
}

void MainSwatchPanel::init$() {
	$SwatchPanel::init$();
}

void MainSwatchPanel::initValues() {
	$set(this, swatchSize, $UIManager::getDimension("ColorChooser.swatchesSwatchSize"_s, $(getLocale())));
	$set(this, numSwatches, $new($Dimension, 31, 9));
	$set(this, gap, $new($Dimension, 1, 1));
}

void MainSwatchPanel::initColors() {
	$useLocalCurrentObjectStackCache();
	$var($ints, rawValues, initRawValues());
	int32_t numColors = $nc(rawValues)->length / 3;
	$set(this, colors, $new($ColorArray, numColors));
	for (int32_t i = 0; i < numColors; ++i) {
		$nc(this->colors)->set(i, $$new($Color, rawValues->get(i * 3), rawValues->get((i * 3) + 1), rawValues->get((i * 3) + 2)));
	}
}

$ints* MainSwatchPanel::initRawValues() {
	$var($ints, rawValues, $new($ints, {
		255,
		255,
		255,
		204,
		255,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		255,
		204,
		255,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		255,
		204,
		204,
		204,
		204,
		153,
		255,
		255,
		153,
		204,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		204,
		153,
		255,
		255,
		153,
		255,
		255,
		153,
		204,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		204,
		153,
		255,
		255,
		153,
		204,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		153,
		153,
		255,
		204,
		204,
		204,
		204,
		102,
		255,
		255,
		102,
		204,
		255,
		102,
		153,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		153,
		102,
		255,
		204,
		102,
		255,
		255,
		102,
		255,
		255,
		102,
		204,
		255,
		102,
		153,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		153,
		102,
		255,
		204,
		102,
		255,
		255,
		102,
		204,
		255,
		102,
		153,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		102,
		102,
		255,
		153,
		102,
		255,
		204,
		153,
		153,
		153,
		51,
		255,
		255,
		51,
		204,
		255,
		51,
		153,
		255,
		51,
		102,
		255,
		51,
		51,
		255,
		51,
		51,
		255,
		51,
		51,
		255,
		102,
		51,
		255,
		153,
		51,
		255,
		204,
		51,
		255,
		255,
		51,
		255,
		255,
		51,
		204,
		255,
		51,
		153,
		255,
		51,
		102,
		255,
		51,
		51,
		255,
		51,
		51,
		255,
		51,
		51,
		255,
		102,
		51,
		255,
		153,
		51,
		255,
		204,
		51,
		255,
		255,
		51,
		204,
		255,
		51,
		153,
		255,
		51,
		102,
		255,
		51,
		51,
		255,
		51,
		51,
		255,
		51,
		51,
		255,
		51,
		51,
		255,
		102,
		51,
		255,
		153,
		51,
		255,
		204,
		153,
		153,
		153,
		0,
		255,
		255,
		0,
		204,
		255,
		0,
		153,
		255,
		0,
		102,
		255,
		0,
		51,
		255,
		0,
		0,
		255,
		51,
		0,
		255,
		102,
		0,
		255,
		153,
		0,
		255,
		204,
		0,
		255,
		255,
		0,
		255,
		255,
		0,
		204,
		255,
		0,
		153,
		255,
		0,
		102,
		255,
		0,
		51,
		255,
		0,
		0,
		255,
		51,
		0,
		255,
		102,
		0,
		255,
		153,
		0,
		255,
		204,
		0,
		255,
		255,
		0,
		204,
		255,
		0,
		153,
		255,
		0,
		102,
		255,
		0,
		51,
		255,
		0,
		0,
		255,
		0,
		0,
		255,
		51,
		0,
		255,
		102,
		0,
		255,
		153,
		0,
		255,
		204,
		102,
		102,
		102,
		0,
		204,
		204,
		0,
		204,
		204,
		0,
		153,
		204,
		0,
		102,
		204,
		0,
		51,
		204,
		0,
		0,
		204,
		51,
		0,
		204,
		102,
		0,
		204,
		153,
		0,
		204,
		204,
		0,
		204,
		204,
		0,
		204,
		204,
		0,
		204,
		204,
		0,
		153,
		204,
		0,
		102,
		204,
		0,
		51,
		204,
		0,
		0,
		204,
		51,
		0,
		204,
		102,
		0,
		204,
		153,
		0,
		204,
		204,
		0,
		204,
		204,
		0,
		204,
		204,
		0,
		153,
		204,
		0,
		102,
		204,
		0,
		51,
		204,
		0,
		0,
		204,
		0,
		0,
		204,
		51,
		0,
		204,
		102,
		0,
		204,
		153,
		0,
		204,
		204,
		102,
		102,
		102,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		102,
		153,
		0,
		51,
		153,
		0,
		0,
		153,
		51,
		0,
		153,
		102,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		102,
		153,
		0,
		51,
		153,
		0,
		0,
		153,
		51,
		0,
		153,
		102,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		153,
		153,
		0,
		102,
		153,
		0,
		51,
		153,
		0,
		0,
		153,
		0,
		0,
		153,
		51,
		0,
		153,
		102,
		0,
		153,
		153,
		0,
		153,
		153,
		51,
		51,
		51,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		51,
		102,
		0,
		0,
		102,
		51,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		51,
		102,
		0,
		0,
		102,
		51,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		51,
		102,
		0,
		0,
		102,
		0,
		0,
		102,
		51,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		102,
		102,
		0,
		0,
		0,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		0,
		51,
		0,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		0,
		51,
		51,
		51,
		51,
		51
	}));
	return rawValues;
}

MainSwatchPanel::MainSwatchPanel() {
}

$Class* MainSwatchPanel::load$($String* name, bool initialize) {
	$loadClass(MainSwatchPanel, name, initialize, &_MainSwatchPanel_ClassInfo_, allocate$MainSwatchPanel);
	return class$;
}

$Class* MainSwatchPanel::class$ = nullptr;

		} // colorchooser
	} // swing
} // javax